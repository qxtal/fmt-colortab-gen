#!/usr/bin/env python3

__author__ = "Quartz Xtal <quartz@xtal.sh>"
__version__ = "1.1.0"
__license__ = "MIT"

import sys
import urllib.request
from datetime import datetime

SOURCE_URL = "https://raw.githubusercontent.com/fmtlib/fmt/master/include/fmt/color.h"

HTML_HEADER = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>fmt Color Reference Table</title>
    <style>
        body {
            background: #eee;
            color: #000;
            font-family: sans-serif;
        }

        a:link,
        a:visited,
        a:hover,
        a:active {
            color: #4444FF;
        }

        table,
        th,
        td {
            border-width: 0.1em;
            border-style: solid;
            border-collapse: collapse;
        }

        td {
            font-family: monospace;
            padding: 0.67em;
        }


        @media (prefers-color-scheme: dark) {
            body {
                background: #111;
                color: #eee;
            }

            a:link,
            a:visited,
            a:hover,
            a:active {
                color: #99bbff;
            }
        }
    </style>
    <meta name="description" content="A visual reference guide for the colors provided by fmt's color library.">
    <meta property="og:title" content="fmt Color Reference Table">
    <meta property="og:description" content="A visual reference guide for the colors provided by fmt's color library." />
    <meta property="og:type" content="website">
</head>
<body>

    <h1>{fmt} Color Reference Table</h1>
    <p>This is a visual reference guide for the colors provided by <a href="https://fmt.dev">fmt</a>'s color library. The values are extracted directly from <code>include/fmt/color.h</code>.</p>
    <p>This document was automatically generated by <a href="https://github.com/qxtal/fmt-colortab-gen">fmt-colortab-gen</a> {{VERSION}}, on {{DATE}}.</p>

    <table border=1 cellspacing=2 cellpadding=4>
        <tr>
            <th>#</th>
            <th>Color Name</th>
            <th>Color (Hex)</th>
            <th>Color (RGB)</th>
            <th>Color Preview</th>
        </tr>

"""

HTML_TABLE_ROW_TEMPLATE = """
<tr> <!-- {{INDEX}}: {{NAME}} -->
    <td>{{INDEX}}</td>
    <td>{{NAME}}</td>
    <td>{{HEX}}</td>
    <td>{{RGB}}</td>
    <td style="background-color:{{HTML_HEX}} !important"></td>
</tr>

"""

HTML_FOOTER = """
    </table>
    <p><em>fmt-colortab-gen {{VERSION}} - <a href="https://github.com/qxtal/fmt-colortab-gen">Source code (under MIT license)</a> - <a href="https://xtal.sh">xtal.sh</a></em></p>
</body>
</html>
"""


def get_color_header_file():
    url = SOURCE_URL
    response = urllib.request.urlopen(url)
    data = response.read()
    rawtext = data.decode('utf-8')
    return rawtext.splitlines()  # split lines, and return as list


def find_line_by_keys(txt_list, keys, start_from=0):
    for index, line in enumerate(txt_list[start_from:]):
        if any(x in line for x in keys):
            return index + start_from + 1


def get_color_table_raw(txt_list):
    start = find_line_by_keys(txt_list, ["enum class color", "{"])
    stop = find_line_by_keys(txt_list, ["};"], start)
    return txt_list[start:stop - 1]


def filter_color_line(line):
    s = line.split()
    color = {
        "name": s[0],
        "hex": s[2].replace(',', ''),  # removes trailing comma
        "rgb": s[4]
    }
    return color


def filter_all_colors(list):
    colors = []
    for line in list:
        c = filter_color_line(line)
        colors.append(c)
    return colors


def generate_html_doc(color_list):
    html_header = HTML_HEADER
    html_footer = HTML_FOOTER
    html_table = ""

    for i in range(len(color_list)):
        row = HTML_TABLE_ROW_TEMPLATE
        row = row.replace("{{INDEX}}", str(i))
        row = row.replace("{{NAME}}", color_list[i].get("name"))
        row = row.replace("{{HEX}}", color_list[i].get("hex"))
        row = row.replace("{{RGB}}", color_list[i].get("rgb"))
        row = row.replace("{{HTML_HEX}}", color_list[i].get("hex")
                          .replace("0x", "#"))
        html_table += row

    html = html_header + html_table + html_footer

    html = html.replace("{{VERSION}}", __version__)
    html = html.replace(
        "{{DATE}}",
        datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S") + " (UTC)"
    )

    return html


def main():
    color_header_raw = get_color_header_file()
    color_table_raw = get_color_table_raw(color_header_raw)
    color_list = filter_all_colors(color_table_raw)
    html = generate_html_doc(color_list)

    fname = "index.html"
    file = open(fname, "w")
    file.write(html)
    file.close()
    print(f"Generated HTML document at '{fname}'")


if __name__ == "__main__":
    if sys.version_info < (3, 0, 0):
        print("Python 3 or newer is required! Program stopped.")
        sys.exit(1)
    main()
